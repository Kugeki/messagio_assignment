// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"
	message "messagio_assignment/internal/domain/message"

	mock "github.com/stretchr/testify/mock"
)

// MessageUsecase is an autogenerated mock type for the MessageUsecase type
type MessageUsecase struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: ctx, msg
func (_m *MessageUsecase) CreateMessage(ctx context.Context, msg *message.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *message.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStats provides a mock function with given fields: ctx
func (_m *MessageUsecase) GetStats(ctx context.Context) (*message.Stats, error) {
	ret := _m.Called(ctx)

	var r0 *message.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*message.Stats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *message.Stats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProcessedMessage provides a mock function with given fields: ctx, msg
func (_m *MessageUsecase) UpdateProcessedMessage(ctx context.Context, msg *message.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *message.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageUsecase creates a new instance of MessageUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageUsecase {
	mock := &MessageUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
